# ==========================
# Azure AI Search (Required)
# ==========================
SEARCH_ENDPOINT=https://<your-search>.search.windows.net
SEARCH_API_KEY=<your-search-key>
INDEX_CHUNKS=ia-chunks
INDEX_RAW=ia-raw

# ======================
# Azure OpenAI (Required)
# ======================
AZURE_OPENAI_ENDPOINT=https://<your-aoai>.openai.azure.com
AZURE_OPENAI_API_KEY=<your-aoai-key>
AZURE_OPENAI_API_VERSION=2024-02-01
AZURE_OPENAI_EMBED_DEPLOYMENT=text-embedding-3-large
AZURE_OPENAI_CHAT_DEPLOYMENT=gpt-4o-mini

# ======================================================
# (Optional) Web Search via Azure OpenAI Agents (Recommended)
# - Use either standard AOAI endpoint or services.ai (AI Project) endpoint
#   AOAI example: https://<your-aoai>.openai.azure.com
#   services.ai example: https://<resource>.services.ai.azure.com/api/projects/<project>
# - If using an existing agent, set AZURE_AGENT_ID or AZURE_EXISTING_AGENT_ID
# - If using API key auth, set AZURE_AGENT_API_KEY; for MSI, leave it unset
# ======================================================
# Generic Agents config (works for both AOAI and services.ai)
AZURE_AGENT_ENDPOINT=
AZURE_AGENT_API_KEY=
AZURE_AGENT_API_VERSION=2024-02-01
AZURE_AGENT_ID=

# services.ai (AI Project) specific â€“ when reusing an existing project/agent
AZURE_EXISTING_AGENT_ID=
AZURE_EXISTING_AIPROJECT_ENDPOINT=
AZURE_EXISTING_AIPROJECT_RESOURCE_ID=

# ======================================================
# (Optional) Bing Web Search client (standalone script only)
# The main app uses Agents for web search; set these only for direct Bing client usage
# ======================================================
BING_SEARCH_ENDPOINT=https://api.bing.microsoft.com/v7.0/search
BING_SEARCH_KEY=

# ==================
# Ingest (Local dev)
# ==================
INGEST_MODE=local
DATA_DIR=./data
IMAGE_DIR=./images

# =============================================
# (Optional) Azure Blob Storage for source files
# - Prefer connection string; or use STORAGE_ACCOUNT_URL + MSI
# - BLOB_SAS_TTL_MIN controls SAS link expiry (minutes)
# =============================================
BLOB_CONNECTION_STRING=
# STORAGE_ACCOUNT_URL=https://<account>.blob.core.windows.net
BLOB_CONTAINER=ia-source
BLOB_SAS_TTL_MIN=60

# =============
# App features
# =============
USE_LANGGRAPH=false

# ================================
# Chainlit persistence & auth (opt)
# ================================
# Local SQLite DB for chat history (used by SQLAlchemy data layer)
DATABASE_URL=sqlite+aiosqlite:///./chainlit.db

# To enable authentication (required for showing history sidebar), set a secret.
# Generate one with: chainlit create-secret
CHAINLIT_AUTH_SECRET=

# Simple password auth for local dev
CHAINLIT_USERNAME=
CHAINLIT_PASSWORD=

# Optional: auto-auth so sidebar history works without manual login
DEV_AUTO_AUTH=false
CHAINLIT_AUTO_USER=guest

# =============================
# (Optional) Deployment helpers
# =============================
AZD_ALLOW_NON_EMPTY_FOLDER=true
